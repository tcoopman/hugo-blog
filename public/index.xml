<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thomas Coopman - Infinite Tree</title>
    <link>https://thomascoopman.eu/</link>
    <description>Recent content on Thomas Coopman - Infinite Tree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Apr 2016 13:20:35 +0200</lastBuildDate>
    <atom:link href="https://thomascoopman.eu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Resume</title>
      <link>https://thomascoopman.eu/resume/</link>
      <pubDate>Wed, 13 Apr 2016 13:20:35 +0200</pubDate>
      
      <guid>https://thomascoopman.eu/resume/</guid>
      <description>

&lt;h2 id=&#34;thomas-coopman:c59a67a3c7bc5faa453847420267045e&#34;&gt;Thomas Coopman&lt;/h2&gt;

&lt;p&gt;Born 1985-12-06&lt;/p&gt;

&lt;h3 id=&#34;independent-software-consultant:c59a67a3c7bc5faa453847420267045e&#34;&gt;Independent Software Consultant&lt;/h3&gt;

&lt;h3 id=&#34;contact:c59a67a3c7bc5faa453847420267045e&#34;&gt;Contact&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Email&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;mailto:thomas.coopman@infitetree.eu&#34;&gt;thomas.coopman@infinitetree.eu&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Phone&lt;/strong&gt;&lt;br /&gt;
+32 491 08 06 16&lt;br /&gt;
&lt;strong&gt;Website&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.thomascoopman.eu/&#34;&gt;www.thomascoopman.eu&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Location&lt;/strong&gt;&lt;br /&gt;
Antwerp - Belgium&lt;/p&gt;

&lt;h3 id=&#34;profiles:c59a67a3c7bc5faa453847420267045e&#34;&gt;Profiles&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/tcoopman&#34;&gt;tcoopman&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://bitbucket.org/tcoopman/&#34;&gt;tcoopman&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Twitter&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://twitter.com/tcoopman&#34;&gt;tcoopman&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Google+&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://plus.google.com/u/0/109624499308077610663&#34;&gt;thomascoopman&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;work:c59a67a3c7bc5faa453847420267045e&#34;&gt;Work&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Infinite Tree&lt;/strong&gt;
2016-01-01
Started as an independent consultant.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;www.protime.eu&#34;&gt;Protime&lt;/a&gt;&lt;/strong&gt;
2015-05-01 - Current
Senior software developer Ruby, Javascript and C#&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agile software development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Kenniscentrum Openbaar Domein (K-O-D)&lt;/strong&gt;&lt;br /&gt;
2010-07-01 - 2015-04-30
Projectleader for IT projects&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Highlights&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Development and project leader for a GIS Viewer, mostly for sewers&lt;/li&gt;
&lt;li&gt;Project lead and development of a platform for searching and creating public domain projects in synergy&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;education:c59a67a3c7bc5faa453847420267045e&#34;&gt;Education&lt;/h4&gt;

&lt;h5 id=&#34;master-of-informatics:c59a67a3c7bc5faa453847420267045e&#34;&gt;Master of Informatics&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://www.kuleuven.be/&#34;&gt;KULeuven&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Masterthesis:&lt;/strong&gt;Â A framework for dynamic extensible and context-driven domotics systems&lt;/p&gt;

&lt;h4 id=&#34;skills:c59a67a3c7bc5faa453847420267045e&#34;&gt;Skills&lt;/h4&gt;

&lt;p&gt;Methodologies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Domain Driven Design&lt;/li&gt;
&lt;li&gt;Kanban and Agile software development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Frontend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;li&gt;Elm&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;Reactjs + Flux&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Backend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GIS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ArcGIS Server + Desktop&lt;/li&gt;
&lt;li&gt;Geoserver&lt;/li&gt;
&lt;li&gt;Leaflet&lt;/li&gt;
&lt;li&gt;Openlayers&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;interests:c59a67a3c7bc5faa453847420267045e&#34;&gt;Interests&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.chiro.be/&#34;&gt;Chiro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reading&lt;/li&gt;
&lt;li&gt;Movies&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Modelling money in Elm</title>
      <link>https://thomascoopman.eu/blog/2016/04/12/modelling-money-in-elm/</link>
      <pubDate>Tue, 12 Apr 2016 22:28:31 +0200</pubDate>
      
      <guid>https://thomascoopman.eu/blog/2016/04/12/modelling-money-in-elm/</guid>
      <description>

&lt;p&gt;After reading the blog post of Mathias Verraes (@mathiasverraes) on (Type Safety and Money)[&lt;a href=&#34;http://verraes.net/2016/02/type-safety-and-money/&#34;&gt;http://verraes.net/2016/02/type-safety-and-money/&lt;/a&gt;], and after doing a real short modelling attempt in Haskell at Socrates Belgium, I wanted to try to model Money in Elm.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to go to deep and too far so I&amp;rsquo;ve set some basic constraints for myself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cannot add money of different currencies (you need an explicit conversion) - &lt;em&gt;Add constraint&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;We also want a Price. A Price is a Money and a VAT amount.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal is to explore different ways of modelling the money in Elm and to explore how a type safe language can support our constraints.&lt;/p&gt;

&lt;h2 id=&#34;possible-type-declarations-of-money-in-elm:2012ba4f5f8746a94832610fb83d5960&#34;&gt;Possible type declarations of Money in Elm&lt;/h2&gt;

&lt;p&gt;Money is an amount (Float) and a currency&lt;/p&gt;

&lt;p&gt;If you are doing serious calculations with money, you might want to check if you don&amp;rsquo;t run into precision issues with Float. This is not the goal of the exercise, so we use Float.&lt;/p&gt;

&lt;p&gt;There are some different options for modelling the money.&lt;/p&gt;

&lt;p&gt;With a Tuple, a Currency and a Float:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Currency&lt;/span&gt;, &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;)
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Currency&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or with union types&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Both these implementations fulfill the requirement of a &lt;code&gt;Money&lt;/code&gt; type for the &lt;code&gt;Price&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These implementations cannot enforce the &lt;em&gt;add constraint&lt;/em&gt; at compile time. Although, you can enforce that you don&amp;rsquo;t get wrong results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or, there can be invalid money&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Invalid&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This last one would be harder to implement with a Tuple. But in most other ways I believe the Tuple and the union types are very similar. I like the union types better, so I won&amp;rsquo;t explore the tuple any further.&lt;/p&gt;

&lt;p&gt;When we have the choice between these 2 add type definitions, which one is best?
I prefer &lt;code&gt;add : Money -&amp;gt; Money -&amp;gt; Maybe Money&lt;/code&gt; for 2 reasons: (1) Invalid is not an actual type of money and (2) returning Maybe makes it very explicit that this an operation that can fail.&lt;/p&gt;

&lt;p&gt;Would it be possible to enforce the constraint of adding only the same currencies on compile time? Yes, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you have to implement 2 add functions for both types.&lt;/p&gt;

&lt;p&gt;This does have some disadvantages, you have to implement add twice. If you want to have them in the same file, the names of the add methods can&amp;rsquo;t be the same, and we need some type to represent money (for our price constraint).
This also means that it&amp;rsquo;s best to implement &lt;code&gt;Euro&lt;/code&gt; and &lt;code&gt;Dollar&lt;/code&gt; both in their own module, so that you can create 2 add functions.&lt;/p&gt;

&lt;p&gt;But lets see if this is doable.&lt;/p&gt;

&lt;p&gt;First the problem of the reimplementation. This is something that is unavailable in Elm (I believe it&amp;rsquo;s possible to avoid this with type classes in Haskell), but it&amp;rsquo;s not that bad.
Suppose we needed to write many functions on money types, then we could write them like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt;
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;of&lt;/span&gt;
			(&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;(+)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Like this we can avoid writing complex functions twice&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;complexOperation&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;complexOperation&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;complexer&lt;/span&gt;

&lt;span style=&#34;color: #336699&#34;&gt;complexer&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second constraint is that we need a &lt;code&gt;Price&lt;/code&gt; with a &lt;code&gt;Money&lt;/code&gt; type. With our first implementations this constraint was already fulfilled, but here we need to implement a &lt;code&gt;Money&lt;/code&gt; type too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USD&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT6&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT12&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT21&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Price&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt;, &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Here it makes more sense to use a tuple for &lt;code&gt;Price&lt;/code&gt;, &lt;code&gt;Price&lt;/code&gt; is a &lt;code&gt;Money&lt;/code&gt; and a &lt;code&gt;VAT&lt;/code&gt;, while &lt;code&gt;Money&lt;/code&gt; is a amount of some currency)&lt;/p&gt;

&lt;p&gt;We also need functions to transform a EUR or USD to Money, but these are trivial:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EURToMoney&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt;
&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EURToMoney&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;eur&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;eur&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;extra-currency-conversions:2012ba4f5f8746a94832610fb83d5960&#34;&gt;Extra - Currency Conversions&lt;/h2&gt;

&lt;p&gt;What if you want to convert a currency. Then you need exchange rates.
With Elm, these conversions can be typed checked too, although it&amp;rsquo;s a bit verbose.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we want all the &lt;code&gt;Money&lt;/code&gt; of our &lt;code&gt;Price&lt;/code&gt;s to be converted to euro.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EURToUSD&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USDToEUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Exchanges&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EURToUSD&lt;/span&gt;, &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USDToEUR&lt;/span&gt;)


&lt;span style=&#34;color: #336699&#34;&gt;moneyToEuro&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Exchanges&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;moneyToEuro&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;mon&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;con&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;con&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;of&lt;/span&gt;
		(&lt;span style=&#34;color: #336699&#34;&gt;euroToUsd&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;usdToEur&lt;/span&gt;) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;mon&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;of&lt;/span&gt;
				&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;usd&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; ((&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Usd&lt;/span&gt;&lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;extract&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;usd&lt;/span&gt;) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;usdToEur&lt;/span&gt;)
				&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;eur&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;eur&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where extract is a function that extracts the amount of the USD.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:2012ba4f5f8746a94832610fb83d5960&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Elm doesn&amp;rsquo;t have type classes so some things are extra work and are a bit more verbose. But it is possible to enforce a lot at compile time. Furthermore everything is very readable.&lt;/p&gt;

&lt;p&gt;Is it worth it of doing it like this? That totally depends on your use case. A lot of times you will want to use &lt;code&gt;type Money = EUR Float | USD Float&lt;/code&gt; and use a &lt;code&gt;Maybe&lt;/code&gt; type to enforce your constraints, but sometimes you will do the extra work to enforce some things at compile time.&lt;/p&gt;

&lt;h2 id=&#34;update-2016-04-18:2012ba4f5f8746a94832610fb83d5960&#34;&gt;Update 2016-04-18&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Zach May&lt;/em&gt; left a nice comment (Thanks!) on the blog about an alternative solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USD&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USD&lt;/span&gt; 
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Int&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;)

&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;m&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;m&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;of&lt;/span&gt;
    (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;), &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;i&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;a&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;i&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This solution also enforces strict types when adding money with the advantage that you only need one implementation for add. A possible downside could be if you want your money types to have different number types (for example if you want to model bitcoins not with &lt;code&gt;Int&lt;/code&gt;s but with &lt;code&gt;SomeBitcoinNumberType&lt;/code&gt;). But like I said in my conclusion, you have to look at your constraints and chose a solution yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://thomascoopman.eu/blog/2016/04/12/welcome/</link>
      <pubDate>Tue, 12 Apr 2016 21:28:31 +0200</pubDate>
      
      <guid>https://thomascoopman.eu/blog/2016/04/12/welcome/</guid>
      <description>&lt;p&gt;Welcome to the my new site written in &lt;a href=&#34;http://gohugo.io/&#34;&gt;hugo&lt;/a&gt;.
While busy, I&amp;rsquo;ve set up https via letsencrypt. (see &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04&#34;&gt;tutorial&lt;/a&gt;. You can find the source code of the blog &lt;a href=&#34;https://github.com/tcoopman/hugo-blog&#34;&gt;here&lt;/a&gt;.
This is a reboot of my site, and an attempt to blog some more.&lt;/p&gt;

&lt;p&gt;So without further ado, let&amp;rsquo;s start blogging :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing ES6 code</title>
      <link>https://thomascoopman.eu/blog/2015/01/13/testing-es6-code/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://thomascoopman.eu/blog/2015/01/13/testing-es6-code/</guid>
      <description>

&lt;p&gt;Recently, I&amp;rsquo;ve changed my webpack workflow, and switched to &lt;a href=&#34;https://6to5.org/&#34;&gt;6to5&lt;/a&gt;, to be able to write more of my React code in ES6 than the current jsx transpiler supports (and because 6to5 just rocks!). You can find this workflow in my &lt;a href=&#34;https://github.com/tcoopman/boilerplate-webpack-react&#34;&gt;boilerplate-webpack-react&lt;/a&gt; project. Switching was easy. I&amp;rsquo;ve just replaced jsx-loader with 6to5-loader and everything worked correctly.&lt;/p&gt;

&lt;p&gt;Writing code and developing is a breeze with this workflow, especially with &lt;a href=&#34;https://github.com/gaearon/react-hot-loader&#34;&gt;react-hot-loader&lt;/a&gt;. I didn&amp;rsquo;t look into writing test though yet, and it took me a little while to find out how to do it, so I explain it here.&lt;/p&gt;

&lt;h2 id=&#34;karma-webpack:6a452c0786128e7526af44fd8d33053c&#34;&gt;Karma-webpack&lt;/h2&gt;

&lt;p&gt;Luckely, there exist a &lt;a href=&#34;http://karma-runner.github.io/&#34;&gt;karma&lt;/a&gt; plugin &lt;a href=&#34;https://github.com/webpack/karma-webpack&#34;&gt;webpack-karma&lt;/a&gt; that allows you to run webpack on files loaded by karma. This means, the test can be written in ES6 (or any other language you prefer that can be transpiled by a webpack loader), and your own code also gets transpiled.&lt;/p&gt;

&lt;p&gt;Let me show my setup.&lt;/p&gt;

&lt;h3 id=&#34;install-dependencies:6a452c0786128e7526af44fd8d33053c&#34;&gt;Install dependencies&lt;/h3&gt;

&lt;p&gt;First you need to install all dependencies:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install --save-dev karma karma-mocha karma-webpack karma-chrome-launcher should&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&#34;http://mochajs.org/&#34;&gt;mocha&lt;/a&gt; as test framework and &lt;a href=&#34;https://github.com/shouldjs/should.js&#34;&gt;should&lt;/a&gt; as assertion library, but this should work with anything that karma supports.&lt;/p&gt;

&lt;h3 id=&#34;karma-configuration-file:6a452c0786128e7526af44fd8d33053c&#34;&gt;Karma configuration file&lt;/h3&gt;

&lt;p&gt;Next we need to create the karma config file &lt;em&gt;karma.conf.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #888888&#34;&gt;// Karma configuration&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;var&lt;/span&gt; path = require(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;);

module.exports = &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;function&lt;/span&gt;(config) {
  config.set({
    &lt;span style=&#34;color: #888888&#34;&gt;// ... normal karma configuration&lt;/span&gt;

    files: [
    &lt;span style=&#34;color: #888888&#34;&gt;// all files ending in &amp;quot;_test&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;test/*_test.jsx&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;test/**/*_test.jsx&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #888888&#34;&gt;// each file acts as entry point for the webpack configuration&lt;/span&gt;
    ],


    frameworks: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;mocha&amp;#39;&lt;/span&gt;],


    browsers: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;Chrome&amp;#39;&lt;/span&gt;],


    preprocessors: {
      &lt;span style=&#34;color: #888888&#34;&gt;// add webpack as preprocessor&lt;/span&gt;
      &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;test/data/*.jsx&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;],
      &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;test/*_test.jsx&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;],
      &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;test/**/*_test.jsx&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;]
    },

    webpack: {
      &lt;span style=&#34;color: #888888&#34;&gt;// webpack configuration&lt;/span&gt;
      output: {
        path: path.join(__dirname, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;),
        publicPath: &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;,
        filename: &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;app.js&amp;#39;&lt;/span&gt;,
        chunkFilename: &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;[chunkhash].js&amp;#39;&lt;/span&gt;
      },


      resolve: {
        extensions: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;.js&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;.jsx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;.styl&amp;#39;&lt;/span&gt;],
        packageMains: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;webpack&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;browser&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;browserify&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;]
      },


      module: {
        loaders: [
          {test: &lt;span style=&#34;color: #008800; background-color: #fff0ff&#34;&gt;/\.jsx$/&lt;/span&gt;, loaders: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;6to5-loader&amp;#39;&lt;/span&gt;] }
        ]
      }
    },


    webpackMiddleware: {
      &lt;span style=&#34;color: #888888&#34;&gt;// webpack-dev-middleware configuration&lt;/span&gt;
      &lt;span style=&#34;color: #888888&#34;&gt;// i. e.&lt;/span&gt;
      noInfo: &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;true&lt;/span&gt;
    },

    plugins: [
      require(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;karma-chrome-launcher&amp;#39;&lt;/span&gt;),
      require(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;karma-mocha&amp;#39;&lt;/span&gt;),
      require(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;karma-webpack&amp;#39;&lt;/span&gt;)
    ]

  });
};
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;first-test:6a452c0786128e7526af44fd8d33053c&#34;&gt;First test&lt;/h3&gt;

&lt;p&gt;We also add a simple _sanity&lt;em&gt;test&lt;/em&gt; to make sure everything is setup correctly&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;import&lt;/span&gt; should from &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;should&amp;#39;&lt;/span&gt;;

describe(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;sanity test&amp;#39;&lt;/span&gt;, () =&amp;gt; {
  it(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;true should be true&amp;#39;&lt;/span&gt;, () =&amp;gt; {
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;true&lt;/span&gt;.should.be.ok;
  });
});
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;first-run:6a452c0786128e7526af44fd8d33053c&#34;&gt;First run&lt;/h3&gt;

&lt;p&gt;Now, if we want to run our test, we run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node node_modules/karma/bin/karma start karma.conf.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This should start Chrome (if you don&amp;rsquo;t have chrome, see the &lt;a href=&#34;http://karma-runner.github.io/0.12/config/browsers.html&#34;&gt;karma browser configuration&lt;/a&gt;) and print this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;INFO [karma]: Karma v0.12.31 server started at http://localhost:9876/
INFO [launcher]: Starting browser Chrome
INFO [Chrome 39.0.2171 (Windows 7)]: Connected on socket xBMICOzH9lh3Eo9INXDA with id 55389724
Chrome 39.0.2171 (Windows 7): Executed &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt; of &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt; SUCCESS (0.009 secs / &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;0&lt;/span&gt; secs)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every time you change your code it will automatically rerun your tests.&lt;/p&gt;

&lt;p&gt;To make it a bit easier to run the test, add the test command to npm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;node node_modules/karma/bin/karma start karma.conf.js&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could also add &lt;code&gt;--single-run&lt;/code&gt; if you want to run the test only once and don&amp;rsquo;t watch.&lt;/p&gt;

&lt;h2 id=&#34;testing-react-code:6a452c0786128e7526af44fd8d33053c&#34;&gt;Testing React code&lt;/h2&gt;

&lt;p&gt;The steps above give you a working testing environment, now we can test our code:&lt;/p&gt;

&lt;p&gt;To test this we create a simple React component &lt;em&gt;Button.react.jsx&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;;


&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;default&lt;/span&gt; React.createClass({
  displayName: &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;Button&amp;#39;&lt;/span&gt;,


  render() {
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &amp;lt;div&amp;gt;button&amp;lt;&lt;span style=&#34;color: #a61717; background-color: #e3d2d2&#34;&gt;/div&amp;gt;;&lt;/span&gt;
  }
});
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And we test it in _Button.react&lt;em&gt;test.jsx&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;import&lt;/span&gt; React from &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;react/addons&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;import&lt;/span&gt; should from &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;should&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;import&lt;/span&gt; Button from &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;../app/jsx/components/Button.react&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;const&lt;/span&gt; TestUtils = React.addons.TestUtils;


describe(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;Button&amp;#39;&lt;/span&gt;, () =&amp;gt; {
  it(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;renders button div&amp;#39;&lt;/span&gt;, () =&amp;gt; {
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;const&lt;/span&gt; button = TestUtils.renderIntoDocument(
      &amp;lt;Button /&amp;gt;
    );
    TestUtils.isCompositeComponent(button).should.be.ok;
    button.getDOMNode().textContent.should.be.eql(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;);
  });
});
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Easy!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;remark:6a452c0786128e7526af44fd8d33053c&#34;&gt;Remark&lt;/h3&gt;

&lt;p&gt;While testing, I ran into a problem. This line in HelloWorld.react.jsx: &lt;code&gt;var exampleImage = require(&#39;../../images/example.jpg&#39;);&lt;/code&gt; proved to be a problem. But the problem was quiet obvious to solve, I just needed to add a image loader to the karma webpack configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;module: {
  loaders: [
  {test: &lt;span style=&#34;color: #008800; background-color: #fff0ff&#34;&gt;/\.jsx$/&lt;/span&gt;, loaders: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;6to5-loader&amp;#39;&lt;/span&gt;] },
  &lt;span style=&#34;color: #888888&#34;&gt;// Add the image loader&lt;/span&gt;
  {test: &lt;span style=&#34;color: #008800; background-color: #fff0ff&#34;&gt;/.*\.(gif|png|jpg)$/&lt;/span&gt;, loaders: [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;file?hash=sha512&amp;amp;digest=hex&amp;amp;size=16&amp;amp;name=[hash].[ext]&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;image-webpack-loader?optimizationLevel=7&amp;amp;interlaced=false&amp;#39;&lt;/span&gt;]}
  ]
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After this, I could test the HelloWorld component too.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:6a452c0786128e7526af44fd8d33053c&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Once you have this up, you can test your code with the same setup you already have. Webpack rocks!&lt;/p&gt;

&lt;p&gt;If you have any questions, please leave them as an issue at my boilerplate repository (&lt;a href=&#34;https://github.com/tcoopman/boilerplate-webpack-react/issues&#34;&gt;https://github.com/tcoopman/boilerplate-webpack-react/issues&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;commits:6a452c0786128e7526af44fd8d33053c&#34;&gt;Commits&lt;/h2&gt;

&lt;p&gt;All steps and code above can be found in the commits between tag 0.0.9 and 0.0.10: &lt;a href=&#34;https://github.com/tcoopman/boilerplate-webpack-react/commits/master&#34;&gt;https://github.com/tcoopman/boilerplate-webpack-react/commits/master&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About the site, about me</title>
      <link>https://thomascoopman.eu/blog/2014/10/04/about-the-site-about-me/</link>
      <pubDate>Sat, 04 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://thomascoopman.eu/blog/2014/10/04/about-the-site-about-me/</guid>
      <description>&lt;p&gt;My name is Thomas Coopman and I&amp;rsquo;m a 29 year old developer. Recently I&amp;rsquo;ve
officially started freelancing/consulting in my spare time. That&amp;rsquo;s the main
reason for creating this site and blog.&lt;/p&gt;

&lt;p&gt;On this site you can find some more information &lt;a href=&#34;https://thomascoopman.eu/about&#34;&gt;about me&lt;/a&gt;. At the
&lt;a href=&#34;https://thomascoopman.eu/portfolio&#34;&gt;portfolio&lt;/a&gt; page you can see some things I&amp;rsquo;ve created. That page is
empty at the moment but it will be coming soon.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a developer, mostly a web-developer (backend and frontend). In my main job,
I&amp;rsquo;m a project manager and developer. The main things I do is implementing
GIS systems and viewers, so I&amp;rsquo;ve got a lot of experience with GIS (mainly with
ArcGIS, but I also know Geoserver and leaflet).&lt;/p&gt;

&lt;p&gt;If you need someone to help you with the implementation of a custom solution,
GIS or something else. You want to get a second opinion about something
technical. Or you need some help on a project&amp;hellip;
contact me and we can have a chat!&lt;/p&gt;

&lt;p&gt;Greetings&lt;/p&gt;

&lt;p&gt;Thomas&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating this site</title>
      <link>https://thomascoopman.eu/blog/2014/09/29/creating-this-site/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://thomascoopman.eu/blog/2014/09/29/creating-this-site/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This is not valid anymore. The site is build with hugo&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This blogpost will be a about the why, but mostly about how I&amp;rsquo;ve created
this site.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve created this site mostly for these reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make myself visible on the web.&lt;/li&gt;
&lt;li&gt;Practice my design and web-development skills.&lt;/li&gt;
&lt;li&gt;Practice my writing (blog).&lt;/li&gt;
&lt;li&gt;Record things I&amp;rsquo;ve learned for myself. Maybe someone else will find
something useful here.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;content:dc8f9a04806b6e0cacfc6b14f9ac10fd&#34;&gt;Content&lt;/h1&gt;

&lt;p&gt;The contents of this site contain information about me, to make me more
visible on the web. The site includes a blog with primarly technical content. In
the first place javascript and web-development although this can change
depending on my interests at that moment and what I&amp;rsquo;m working about.&lt;/p&gt;

&lt;p&gt;Secondly, I&amp;rsquo;ll try to blog about some of my hobbies (hiking for example),
but that will be very occasional.&lt;/p&gt;

&lt;h1 id=&#34;framework:dc8f9a04806b6e0cacfc6b14f9ac10fd&#34;&gt;Framework&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve created this site in &lt;a href=&#34;http://facebook.github.io/react/&#34;&gt;Reactjs&lt;/a&gt;, my
current favorite javascript framework that I like for the same reasons everyone
else likes it. There are lots of blogs
about react so I&amp;rsquo;ll try to keep the redundancy low and only talk about the new
things.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;react-router&lt;/a&gt; for the routing.
At the moment of writing there are some shortcomings
(mostly no server-side rendering&lt;sup&gt;1&lt;/sup&gt;), but these guys are working
on that and we can expect it shortly. As soon as server side rendering is
supported, I&amp;rsquo;ll add it so this site can be easily searched with
Google, and then it should also be mostly useful without javascript.&lt;/p&gt;

&lt;p&gt;For the css I&amp;rsquo;m using the &lt;a href=&#34;http://learnboost.github.io/stylus/&#34;&gt;stylus&lt;/a&gt; preprocessor.
I&amp;rsquo;ve tried Less and Sass in the past but I like stylus, and this site is a
good way of exploring it. I try to keep the site low on css and don&amp;rsquo;t
use a framework like bootstrap or foundation.&lt;/p&gt;

&lt;h1 id=&#34;blog:dc8f9a04806b6e0cacfc6b14f9ac10fd&#34;&gt;Blog&lt;/h1&gt;

&lt;p&gt;The blog is written with my own implementation of a React markdown component
that I&amp;rsquo;ve &lt;a href=&#34;https://github.com/tcoopman/markdown-react&#34;&gt;published&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;. In short, it uses an existing markdown parser,
but instead of rendering a html string, it renders React components. The cool
thing about this is that you can have full control over the React components, so
you can do all kind of cool things with. For example add a custom subscript
to every image or parse different html than what you normally want (like I do in
this blog. Here I render &amp;lt;h2&amp;gt; elements instead of &amp;lt;h1&amp;gt;). Of course you can do
all these things if you know something about parsing, but this component makes this
super easy if you know React, just substitute the main component for your own and
you&amp;rsquo;re started. I&amp;rsquo;m planning on writing a short blog post about this component too.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

&lt;h1 id=&#34;hosting-and-deploying:dc8f9a04806b6e0cacfc6b14f9ac10fd&#34;&gt;Hosting and deploying&lt;/h1&gt;

&lt;p&gt;I build this site with gulp and webpack. My boilerplate package
can be found at &lt;a href=&#34;https://github.com/tcoopman/boilerplate-webpack-react&#34;&gt;boilerplate-webpack-react&lt;/a&gt;.
This site uses a very similar build, with some adaptations for the blog.&lt;/p&gt;

&lt;p&gt;This website is hosted on &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; with Nginx.
At the moment it&amp;rsquo;s just a static app, but as soon as react-router supports server
rendering I&amp;rsquo;m going to implement it. I need to set up automatic deployment, probably with git.
I don&amp;rsquo;t build my site on the server. I push the build to the server.
When server side rendering is implemented, the way I deploy my code will change
and I also have a blog about that in the pipeline.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:dc8f9a04806b6e0cacfc6b14f9ac10fd&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;A custom implementation of a blog, custom css and hosted on a vps. And that for
a static site. It&amp;rsquo;s a bit more work, and you could say it&amp;rsquo;s not a best practice
to do things this way, but it&amp;rsquo;s a good way to experiment and try new things and
that&amp;rsquo;s exactly what I want to do with this site.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; This has been fixed in a recent version.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; I&amp;rsquo;ve switched to &lt;a href=&#34;https://github.com/jonschlinkert/remarkable&#34;&gt;remarkable&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>