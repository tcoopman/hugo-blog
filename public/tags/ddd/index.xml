<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ddd on Thomas Coopman - Infinite Tree</title>
    <link>https://infinitetree.eu/tags/ddd/index.xml</link>
    <description>Recent content in Ddd on Thomas Coopman - Infinite Tree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://infinitetree.eu/tags/ddd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exploring aggregate boundaries in event sourced systems</title>
      <link>https://infinitetree.eu/blog/2017/02/08/exploring-aggregate-boundaries-in-event-sourced-systems/</link>
      <pubDate>Wed, 08 Feb 2017 20:44:40 +0100</pubDate>
      
      <guid>https://infinitetree.eu/blog/2017/02/08/exploring-aggregate-boundaries-in-event-sourced-systems/</guid>
      <description>

&lt;p&gt;In this post I&amp;rsquo;m exploring some ways of modelling aggregate boundaries in an event sourced system. This is mostly to crystallise some thoughts that I had after some event storming sessions, but it might be interesting to someone else.&lt;/p&gt;

&lt;p&gt;The domain I&amp;rsquo;m using in this post is the domain that &lt;a href=&#34;https://twitter.com/michelgrootjans&#34;&gt;Michel Grootjans&lt;/a&gt; and I have created for the workshop &lt;em&gt;Playing with projections&lt;/em&gt; (We already gave it a few times, for example at &lt;a href=&#34;https://dddeurope.com/2017/speakers/thomas-coopman/#handson&#34;&gt;DDD Europe&lt;/a&gt; and will also give a session at &lt;a href=&#34;http://itakeunconf.com/&#34;&gt;I T.A.K.E.&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;the-domain-an-online-quiz-platform&#34;&gt;The domain: An online quiz platform&lt;/h2&gt;

&lt;p&gt;In the online quiz platform:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a player can create a new quiz&lt;/li&gt;
&lt;li&gt;they can add questions to the quiz&lt;/li&gt;
&lt;li&gt;they can publish the quiz&lt;/li&gt;
&lt;li&gt;once a quiz has been published, a game can be opened. A game is an instance of a quiz&lt;/li&gt;
&lt;li&gt;Many games of a quiz can be opened (there is no limit)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A game, once it is opened looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;players can join a game&lt;/li&gt;
&lt;li&gt;after some time the game is started&lt;/li&gt;
&lt;li&gt;once the game is started, every question that is part of the quiz will be asked&lt;/li&gt;
&lt;li&gt;players get a limited time to answer the question, if they are too late, a timeout passes&lt;/li&gt;
&lt;li&gt;once all players have answered, or the timeout has passed a new question is asked&lt;/li&gt;
&lt;li&gt;once all questions have been asked, the game is finished&lt;/li&gt;
&lt;li&gt;if no players joined the game, the game will be cancelled&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-can-we-model-the-domain&#34;&gt;How can we model the domain?&lt;/h2&gt;

&lt;p&gt;Now we will take a look at how we can model parts of the domain.&lt;/p&gt;

&lt;p&gt;The first way to model could be by having one aggregate: the quiz. A quiz can handle its whole life cycle and so it&amp;rsquo;s very easy to enforce all rules in this design. But we can see some problems with this design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our quiz aggregate stream can grow to huge sizes. When lots of games are played, there will be lots of events.&lt;/li&gt;
&lt;li&gt;An aggregate, because it should keep its invariants, is a synchronization point. So when there are many games played, this could be a performance issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, at the moment the life cycle of the quiz seems a bit incomplete. The defined business rules don&amp;rsquo;t tell anything about ways of changing the quiz, archiving one, or preventing new games to be started. Suppose in a couple of weeks, business asks us to add these new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A player can change a quiz (add new questions) after it&amp;rsquo;s been published.&lt;/li&gt;
&lt;li&gt;A player can archive a quiz. No games can be started for archived quizzes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course we will ask business:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;What happens to running games when a player changes something?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Running games must not be affected by changes&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This provides a bit of a challenge in the current design. If we model this as one aggregate, we will need to provide extra logic to handle changed questions.&lt;/p&gt;

&lt;p&gt;Suppose we have a quiz with currently open games and change some questions of the quiz. We know that started games should not be affected. To solve this we would could save the old questions. But because multiple games can be started at different times, it&amp;rsquo;s not enough to solve the previous set of questions. A better solution would be to copy the questions to the game when it is started.&lt;/p&gt;

&lt;p&gt;At this point we can see a new design emerging. We can split our domain into 2 aggregates. A quiz and a game.
This can solve the problem of the changing questions and also solves our initial problem of performance and a huge aggregate. The quiz will still be long lived, but will almost always be very small. A game on the other hand will be short lived. The performance will be solved because each game is now independent.&lt;/p&gt;

&lt;p&gt;The design with splitting the quiz and game aggregates introduces a new challenge though. A game can only be started for a quiz in the correct state. A game cannot be opened if the quiz isn&amp;rsquo;t published yet or if it is archived. But the game doesn&amp;rsquo;t have this information, the quiz has.&lt;/p&gt;

&lt;p&gt;So the solution is simple: &lt;em&gt;the quiz creates a new aggregate; the game&lt;/em&gt; (&lt;a href=&#34;https://groups.google.com/forum/#!searchin/dddcqrs/aggregate$20instance|sort:relevance/dddcqrs/B6kxs7FK8_I/F_xcEdkOnHwJ&#34;&gt;aggregates create other aggregate&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In pseudo code this could look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;quiz.open_game(game_id)
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; quiz_is_published
        game = new &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;Game&lt;/span&gt;(game_id, quiz_id, copy(questions))
        &lt;span style=&#34;color: #888888&#34;&gt;# game contains unsaved event game_was_opened&lt;/span&gt;
        return game
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #003388&#34;&gt;_&lt;/span&gt;
        return &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;DomainError&lt;/span&gt;(&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;A game can only be opened for published quizzes&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;exploring-a-different-implementation&#34;&gt;Exploring a different implementation&lt;/h3&gt;

&lt;p&gt;Instead of the quiz aggregate that creates a new aggregate, we could also try something like this: The quiz handles the &lt;code&gt;open_game_request&lt;/code&gt; command and returns an event &lt;code&gt;game_open_requested&lt;/code&gt;. A process manager listens to this event and dispatches a &lt;code&gt;open_game&lt;/code&gt; command. The &lt;code&gt;open_game&lt;/code&gt; command is handled by a game. The &lt;code&gt;game_open_requested&lt;/code&gt; means that it is allowed to open the game.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;open_game&lt;/code&gt; is now an internal command and should not be exposed to users. Users can only request to open a game.&lt;/p&gt;

&lt;p&gt;This adds some complexity and is probably not always a good solution. But sometimes we might need a solution like this. Let&amp;rsquo;s say that the we have some problems with copyrighted materials in our quizzes and that we are enforced to terminate all quizzes and corresponding games immediately (I know, this is probably far fetched, but it is to explore the solution further).&lt;/p&gt;

&lt;p&gt;How could this look?&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;quiz.terminate_due_to_copyright
&lt;span style=&#34;color: #888888&#34;&gt;# returns quiz aggregate with unsaved event (quiz_was_terminated)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A process manager could listen to &lt;code&gt;quiz_was_terminated&lt;/code&gt; and dispatch a &lt;code&gt;terminate_game&lt;/code&gt; command to all open games for that quiz. But &lt;em&gt;how does the process manager know what games are open for the quiz&lt;/em&gt;? Well if we modelled our solution to have the process manager open the games, then it can also keep the state of all the open games for the quiz. So in this final solution we have a process manager that listens to &lt;code&gt;game_open_requested&lt;/code&gt;, &lt;code&gt;quiz_was_terminated&lt;/code&gt;, &lt;code&gt;game_was_closed&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;closing-thoughts&#34;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;Although the problem and the domain seems simple, exploring the solution was fun. Furthermore, I only listed some probable solutions, more possible solutions can be found.&lt;/p&gt;

&lt;p&gt;One thing I didn&amp;rsquo;t touch yet, but might in an other post, is how frameworks or programming styles can force you into some solution. I had some trouble trying to implement the aggregate that creates an other aggregate in at least one framework and have seen some other frameworks where this solution is not obvious to implement.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modelling money in Elm</title>
      <link>https://infinitetree.eu/blog/2016/04/12/modelling-money-in-elm/</link>
      <pubDate>Tue, 12 Apr 2016 22:28:31 +0200</pubDate>
      
      <guid>https://infinitetree.eu/blog/2016/04/12/modelling-money-in-elm/</guid>
      <description>

&lt;p&gt;After reading the blog post of Mathias Verraes (@mathiasverraes) on (Type Safety and Money)[&lt;a href=&#34;http://verraes.net/2016/02/type-safety-and-money/&#34;&gt;http://verraes.net/2016/02/type-safety-and-money/&lt;/a&gt;], and after doing a real short modelling attempt in Haskell at Socrates Belgium, I wanted to try to model Money in Elm.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to go to deep and too far so I&amp;rsquo;ve set some basic constraints for myself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cannot add money of different currencies (you need an explicit conversion) - &lt;em&gt;Add constraint&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;We also want a Price. A Price is a Money and a VAT amount.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal is to explore different ways of modelling the money in Elm and to explore how a type safe language can support our constraints.&lt;/p&gt;

&lt;h2 id=&#34;possible-type-declarations-of-money-in-elm&#34;&gt;Possible type declarations of Money in Elm&lt;/h2&gt;

&lt;p&gt;Money is an amount (Float) and a currency&lt;/p&gt;

&lt;p&gt;If you are doing serious calculations with money, you might want to check if you don&amp;rsquo;t run into precision issues with Float. This is not the goal of the exercise, so we use Float.&lt;/p&gt;

&lt;p&gt;There are some different options for modelling the money.&lt;/p&gt;

&lt;p&gt;With a Tuple, a Currency and a Float:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Currency&lt;/span&gt;, &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;)
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Currency&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or with union types&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Both these implementations fulfill the requirement of a &lt;code&gt;Money&lt;/code&gt; type for the &lt;code&gt;Price&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These implementations cannot enforce the &lt;em&gt;add constraint&lt;/em&gt; at compile time. Although, you can enforce that you don&amp;rsquo;t get wrong results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or, there can be invalid money&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Invalid&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This last one would be harder to implement with a Tuple. But in most other ways I believe the Tuple and the union types are very similar. I like the union types better, so I won&amp;rsquo;t explore the tuple any further.&lt;/p&gt;

&lt;p&gt;When we have the choice between these 2 add type definitions, which one is best?
I prefer &lt;code&gt;add : Money -&amp;gt; Money -&amp;gt; Maybe Money&lt;/code&gt; for 2 reasons: (1) Invalid is not an actual type of money and (2) returning Maybe makes it very explicit that this an operation that can fail.&lt;/p&gt;

&lt;p&gt;Would it be possible to enforce the constraint of adding only the same currencies on compile time? Yes, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you have to implement 2 add functions for both types.&lt;/p&gt;

&lt;p&gt;This does have some disadvantages, you have to implement add twice. If you want to have them in the same file, the names of the add methods can&amp;rsquo;t be the same, and we need some type to represent money (for our price constraint).
This also means that it&amp;rsquo;s best to implement &lt;code&gt;Euro&lt;/code&gt; and &lt;code&gt;Dollar&lt;/code&gt; both in their own module, so that you can create 2 add functions.&lt;/p&gt;

&lt;p&gt;But lets see if this is doable.&lt;/p&gt;

&lt;p&gt;First the problem of the reimplementation. This is something that is unavailable in Elm (I believe it&amp;rsquo;s possible to avoid this with type classes in Haskell), but it&amp;rsquo;s not that bad.
Suppose we needed to write many functions on money types, then we could write them like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt;
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;of&lt;/span&gt;
			(&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;(+)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Like this we can avoid writing complex functions twice&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;complexOperation&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;complexOperation&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;complexer&lt;/span&gt;

&lt;span style=&#34;color: #336699&#34;&gt;complexer&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second constraint is that we need a &lt;code&gt;Price&lt;/code&gt; with a &lt;code&gt;Money&lt;/code&gt; type. With our first implementations this constraint was already fulfilled, but here we need to implement a &lt;code&gt;Money&lt;/code&gt; type too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USD&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT6&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT12&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT21&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Price&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt;, &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;VAT&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Here it makes more sense to use a tuple for &lt;code&gt;Price&lt;/code&gt;, &lt;code&gt;Price&lt;/code&gt; is a &lt;code&gt;Money&lt;/code&gt; and a &lt;code&gt;VAT&lt;/code&gt;, while &lt;code&gt;Money&lt;/code&gt; is a amount of some currency)&lt;/p&gt;

&lt;p&gt;We also need functions to transform a EUR or USD to Money, but these are trivial:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EURToMoney&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt;
&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EURToMoney&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;eur&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;eur&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;extra-currency-conversions&#34;&gt;Extra - Currency Conversions&lt;/h2&gt;

&lt;p&gt;What if you want to convert a currency. Then you need exchange rates.
With Elm, these conversions can be typed checked too, although it&amp;rsquo;s a bit verbose.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we want all the &lt;code&gt;Money&lt;/code&gt; of our &lt;code&gt;Price&lt;/code&gt;s to be converted to euro.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EURToUSD&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USDToEUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Float&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Exchanges&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EURToUSD&lt;/span&gt;, &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USDToEUR&lt;/span&gt;)


&lt;span style=&#34;color: #336699&#34;&gt;moneyToEuro&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Exchanges&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;moneyToEuro&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;mon&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;con&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;con&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;of&lt;/span&gt;
		(&lt;span style=&#34;color: #336699&#34;&gt;euroToUsd&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;usdToEur&lt;/span&gt;) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;mon&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;of&lt;/span&gt;
				&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;usd&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; ((&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Usd&lt;/span&gt;&lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;extract&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;usd&lt;/span&gt;) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;usdToEur&lt;/span&gt;)
				&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Euro&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;eur&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;eur&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where extract is a function that extracts the amount of the USD.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Elm doesn&amp;rsquo;t have type classes so some things are extra work and are a bit more verbose. But it is possible to enforce a lot at compile time. Furthermore everything is very readable.&lt;/p&gt;

&lt;p&gt;Is it worth it of doing it like this? That totally depends on your use case. A lot of times you will want to use &lt;code&gt;type Money = EUR Float | USD Float&lt;/code&gt; and use a &lt;code&gt;Maybe&lt;/code&gt; type to enforce your constraints, but sometimes you will do the extra work to enforce some things at compile time.&lt;/p&gt;

&lt;h2 id=&#34;update-2016-04-18&#34;&gt;Update 2016-04-18&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Zach May&lt;/em&gt; left a nice comment (Thanks!) on the blog about an alternative solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USD&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;USD&lt;/span&gt; 
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;EUR&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Int&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;)

&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;
&lt;span style=&#34;color: #336699&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;=&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;case&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;m&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;m&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;of&lt;/span&gt;
    (&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;), &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;i&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;a&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;Money&lt;/span&gt; (&lt;span style=&#34;color: #336699&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #336699&#34;&gt;i&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #336699&#34;&gt;a&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This solution also enforces strict types when adding money with the advantage that you only need one implementation for add. A possible downside could be if you want your money types to have different number types (for example if you want to model bitcoins not with &lt;code&gt;Int&lt;/code&gt;s but with &lt;code&gt;SomeBitcoinNumberType&lt;/code&gt;). But like I said in my conclusion, you have to look at your constraints and chose a solution yourself.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>